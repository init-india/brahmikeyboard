name: Brahmi Keyboard CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true"

jobs:
  # STAGE 1: Code Quality & Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Code Linting (Kotlin)
      run: |
        echo "🔍 Setting up code linting..."
        
        # Check if ktlint is configured
        for project in android-fdroid android-googleplay; do
          echo "📝 Checking $project..."
          cd $project
          
          # Check if ktlint plugin is available
          if ./gradlew tasks --all | grep -q "ktlint"; then
            echo "✅ ktlint found in $project, running checks..."
            ./gradlew ktlintCheck --no-daemon --stacktrace || echo "⚠️ ktlint check failed or not configured"
          else
            echo "⚠️ ktlint not configured in $project, skipping..."
            # Try to run basic Kotlin compilation instead
            ./gradlew compileDebugKotlin --no-daemon --stacktrace && echo "✅ Kotlin compilation successful"
          fi
          cd ..
        done
        
    - name: Basic Code Validation
      run: |
        echo "🔎 Basic code validation..."
        
        # Check for critical code issues
        for project in android-fdroid android-googleplay; do
          echo "🔍 Validating $project..."
          
          # Check if Kotlin files compile
          cd $project
          ./gradlew compileDebugKotlin --no-daemon --stacktrace && echo "✅ $project: Kotlin compilation successful"
          cd ..
          
          # Check for syntax errors in XML files
          find $project -name "*.xml" -type f | head -10 | while read xml_file; do
            if xmllint --noout "$xml_file" 2>/dev/null; then
              echo "✅ $xml_file: Valid XML"
            else
              echo "❌ $xml_file: Invalid XML"
            fi
          done
        done

  # STAGE 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        project: [android-fdroid, android-googleplay]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Run Unit Tests
      run: |
        cd ${{ matrix.project }}
        echo "🧪 Running unit tests for ${{ matrix.project }}..."
        ./gradlew testDebugUnitTest --no-daemon --stacktrace --continue
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ matrix.project }}
        path: ${{ matrix.project }}/app/build/reports/tests/
        retention-days: 7

  # STAGE 3: Build & Verification
  build-apps:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: unit-tests
    
    strategy:
      matrix:
        project: [android-fdroid, android-googleplay]
        variant: [debug]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Build APK
      run: |
        cd ${{ matrix.project }}
        echo "🏗️ Building ${{ matrix.variant }} APK for ${{ matrix.project }}..."
        ./gradlew assemble${{ matrix.variant }} --no-daemon --stacktrace --continue
        
    - name: Verify APK Generation
      run: |
        cd ${{ matrix.project }}
        echo "🔍 Verifying APK generation..."
        
        # Search for APK files
        APK_COUNT=$(find app/build/outputs -name "*.apk" -type f | wc -l)
        echo "📦 Found $APK_COUNT APK files"
        
        if [ $APK_COUNT -eq 0 ]; then
          echo "❌ No APK files generated!"
          echo "📁 Build outputs:"
          find app/build -type f -name "*.apk" | head -10 || echo "No APKs found"
          echo "📁 Directory structure:"
          find app/build -type d | head -20
          exit 1
        else
          echo "✅ APK generation successful"
          find app/build/outputs -name "*.apk" -type f | head -5 | while read apk; do
            echo "🎯 APK: $apk ($(ls -lh "$apk" | awk '{print $5}'))"
          done
        fi
        
    - name: Upload APK Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: apk-${{ matrix.project }}-${{ matrix.variant }}
        path: ${{ matrix.project }}/app/build/outputs/apk/
        retention-days: 7

  # STAGE 4: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-apps
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Integration Tests
      run: |
        echo "🧪 Running Integration Tests..."
        
        # Test 1: Project Structure
        .github/scripts/validate_structure.sh
        
        # Test 2: Android Manifest
        .github/scripts/validate_manifest.sh
        
        # Test 3: Gradle Configuration
        .github/scripts/validate_gradle.sh

  # STAGE 5: Summary Report
  summary:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, build-apps, integration-tests]
    if: always()
    
    steps:
    - name: Generate Summary Report
      run: |
        echo "# 🚀 Brahmi Keyboard CI/CD Summary" > report.md
        echo "**Workflow:** ${{ github.workflow }}" >> report.md
        echo "**Run ID:** ${{ github.run_id }}" >> report.md
        echo "**Status:** ${{ job.status }}" >> report.md
        echo "" >> report.md
        
        echo "## 📊 Job Results" >> report.md
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> report.md
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> report.md
        echo "- Build: ${{ needs.build-apps.result }}" >> report.md
        echo "- Integration: ${{ needs.integration-tests.result }}" >> report.md
        echo "" >> report.md
        
        echo "## 🎯 Next Steps" >> report.md
        if [[ "${{ needs.build-apps.result }}" == "success" ]]; then
          echo "✅ Build successful! APKs are available in artifacts." >> report.md
          echo "📱 Download APKs from the workflow artifacts to test on device." >> report.md
        else
          echo "❌ Build failed. Check the logs above for details." >> report.md
        fi
        
    - name: Upload Summary Report
      uses: actions/upload-artifact@v4
      with:
        name: ci-cd-summary
        path: report.md
