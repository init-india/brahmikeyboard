name: Brahmi Keyboard CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true"

jobs:
  # STAGE 1: Code Quality & Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Code Linting (Kotlin)
      run: |
        cd android-fdroid
        ./gradlew ktlintCheck --no-daemon
        cd ../android-googleplay
        ./gradlew ktlintCheck --no-daemon
        
    - name: Dependency Vulnerability Check
      run: |
        cd android-fdroid
        ./gradlew dependencyCheckAnalyze --no-daemon || echo "Dependency check completed"
        cd ../android-googleplay  
        ./gradlew dependencyCheckAnalyze --no-daemon || echo "Dependency check completed"
        
    - name: Detect Secrets
      uses: gitleaks/gitleaks-action@v2
      with:
        config-path: .gitleaks.toml
        
    - name: Verify License Compliance
      run: |
        cd android-fdroid
        ./gradlew checkLicenses --no-daemon || echo "License check completed"

  # STAGE 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        project: [android-fdroid, android-googleplay]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Run Unit Tests
      run: |
        cd ${{ matrix.project }}
        ./gradlew testDebugUnitTest --no-daemon --stacktrace
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results-${{ matrix.project }}
        path: ${{ matrix.project }}/app/build/reports/tests/
        retention-days: 7
        
    - name: Test Coverage Report
      run: |
        cd ${{ matrix.project }}
        ./gradlew jacocoTestReport --no-daemon || echo "Coverage report generated"
        
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.project }}
        path: ${{ matrix.project }}/app/build/reports/jacoco/
        retention-days: 7

  # STAGE 3: Build & Verification
  build-apps:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: unit-tests
    
    strategy:
      matrix:
        project: [android-fdroid, android-googleplay]
        variant: [debug, release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Build APK
      run: |
        cd ${{ matrix.project }}
        if [ "${{ matrix.variant }}" = "release" ]; then
          ./gradlew assembleRelease --no-daemon --stacktrace
        else
          ./gradlew assembleDebug --no-daemon --stacktrace
        fi
        
    - name: Verify APK Contents
      run: |
        cd ${{ matrix.project }}
        APK_PATH=$(find app/build/outputs/apk -name "*${{ matrix.variant }}*.apk" | head -1)
        if [ -n "$APK_PATH" ]; then
          echo "📦 APK: $APK_PATH"
          ls -lh "$APK_PATH"
          
          # Basic APK validation
          if command -v aapt >/dev/null 2>&1; then
            aapt dump badging "$APK_PATH" | grep -E "(package:|launchable-activity|ime-service)" || true
          fi
        else
          echo "❌ No APK found for ${{ matrix.variant }}"
          find app/build/outputs -type f -name "*.apk" || echo "No APKs found"
        fi
        
    - name: Upload APK Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: apk-${{ matrix.project }}-${{ matrix.variant }}
        path: ${{ matrix.project }}/app/build/outputs/apk/
        retention-days: 7

  # STAGE 4: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-apps
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Run Integration Tests
      run: |
        echo "🧪 Running Integration Tests..."
        
        # Test 1: Project Structure Integrity
        chmod +x .github/scripts/test_project_structure.sh
        .github/scripts/test_project_structure.sh
        
        # Test 2: Manifest Validation
        chmod +x .github/scripts/test_manifest_integrity.sh
        .github/scripts/test_manifest_integrity.sh
        
        # Test 3: Resource Validation  
        chmod +x .github/scripts/test_resources.sh
        .github/scripts/test_resources.sh
        
    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          integration-reports/
        retention-days: 7

  # STAGE 5: Functional Tests (Emulator)
  functional-tests:
    name: Functional Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Run Android Emulator
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        arch: x86_64
        profile: pixel_4
        script: |
          cd android-fdroid
          ./gradlew connectedDebugAndroidTest --no-daemon
          
    - name: Upload Functional Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: functional-test-results
        path: android-fdroid/app/build/reports/androidTests/
        retention-days: 7

  # STAGE 6: Performance & Size Checks
  performance-checks:
    name: Performance & Size
    runs-on: ubuntu-latest
    needs: functional-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: APK Size Analysis
      run: |
        echo "📊 APK Size Analysis"
        
        for project in android-fdroid android-googleplay; do
          echo "🔍 Analyzing $project"
          APK_PATH=$(find $project/app/build/outputs/apk -name "*release*.apk" | head -1)
          if [ -n "$APK_PATH" ]; then
            echo "📦 $project APK: $(ls -lh "$APK_PATH" | awk '{print $5}')"
            
            if command -v aapt >/dev/null 2>&1; then
              echo "📋 APK Contents:"
              aapt list "$APK_PATH" | grep -E "\.(so|dex)$" | wc -l | xargs echo "  Native libs & dex files:"
            fi
          fi
        done
        
    - name: Build Performance Check
      run: |
        echo "⏱️ Build Performance"
        
        for project in android-fdroid android-googleplay; do
          cd $project
          echo "🏗️ $project build times:"
          ./gradlew assembleDebug --profile --no-daemon || true
          if [ -f app/build/reports/profile/profile-*.html ]; then
            echo "✅ Build profile generated for $project"
          fi
          cd ..
        done
        
    - name: Upload Build Profiles
      uses: actions/upload-artifact@v4
      with:
        name: build-profiles
        path: |
          android-fdroid/app/build/reports/profile/
          android-googleplay/app/build/reports/profile/
        retention-days: 7

  # STAGE 7: Security Scans
  security-scans:
    name: Security Scans
    runs-on: ubuntu-latest
    needs: performance-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Permission Analysis
      run: |
        echo "🔐 Permission Analysis"
        
        for project in android-fdroid android-googleplay; do
          MANIFEST="$project/app/src/main/AndroidManifest.xml"
          if [ -f "$MANIFEST" ]; then
            echo "📄 $project permissions:"
            grep -o 'android:name="[^"]*permission[^"]*"' "$MANIFEST" | sort | uniq || echo "No special permissions"
          fi
        done

  # STAGE 8: Release Preparation
  release-prep:
    name: Release Preparation
    runs-on: ubuntu-latest
    needs: [security-scans, performance-checks, functional-tests]
    # FIXED LINE 445: Simplified condition
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download APK Artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-apks
        
    - name: Generate Release Notes
      run: |
        echo "📝 Generating Release Notes"
        echo "# Brahmi Keyboard Release $(date +%Y.%m.%d)" > release_notes.md
        echo "" >> release_notes.md
        echo "## Changes" >> release_notes.md
        git log --oneline -10 >> release_notes.md
        echo "" >> release_notes.md
        echo "## APK Checksums" >> release_notes.md
        find release-apks -name "*.apk" | while read apk; do
          echo "**$(basename $apk)**" >> release_notes.md
          echo "- SHA256: $(sha256sum "$apk" | cut -d' ' -f1)" >> release_notes.md
          echo "- Size: $(ls -lh "$apk" | awk '{print $5}')" >> release_notes.md
          echo "" >> release_notes.md
        done
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: release-apks/**/*.apk
        body_path: release_notes.md

  # STAGE 9: Deployment (Simplified)
  deploy-prep:
    name: Deployment Preparation
    runs-on: ubuntu-latest
    needs: release-prep
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Prepare Deployment
      run: |
        echo "🚀 Deployment Preparation"
        echo "F-Droid build ready for repository update"
        echo "Google Play build ready for internal testing"
        echo ""
        echo "Next steps:"
        echo "1. Upload to Google Play Console"
        echo "2. Update F-Droid metadata"
        echo "3. Submit for review"

  # FINAL STAGE: Notifications & Reports
  summary:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    needs: 
      - code-quality
      - unit-tests  
      - build-apps
      - integration-tests
      - functional-tests
      - performance-checks
      - security-scans
    if: always()
    
    steps:
    - name: Generate CI/CD Report
      run: |
        echo "# 🚀 Brahmi Keyboard CI/CD Summary" > ci_report.md
        echo "**Run:** ${{ github.run_id }}" >> ci_report.md
        echo "**Workflow:** ${{ github.workflow }}" >> ci_report.md
        echo "**Status:** ${{ job.status }}" >> ci_report.md
        echo "" >> ci_report.md
        
        echo "## 📊 Test Results" >> ci_report.md
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> ci_report.md
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> ci_report.md
        echo "- Build: ${{ needs.build-apps.result }}" >> ci_report.md
        echo "- Integration: ${{ needs.integration-tests.result }}" >> ci_report.md
        echo "- Functional: ${{ needs.functional-tests.result }}" >> ci_report.md
        echo "- Performance: ${{ needs.performance-checks.result }}" >> ci_report.md
        echo "- Security: ${{ needs.security-scans.result }}" >> ci_report.md
        echo "" >> ci_report.md
        
        # FIXED: Simplified condition
        echo "## 🎯 Build Status" >> ci_report.md
        if [[ "${{ needs.build-apps.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" ]]; then
          echo "✅ All checks passed! Ready for release." >> ci_report.md
        else
          echo "❌ Some checks failed. Please review the logs." >> ci_report.md
        fi
        
    - name: Upload CI Report
      uses: actions/upload-artifact@v4
      with:
        name: ci-cd-summary
        path: ci_report.md
        retention-days: 30
        
    - name: Notify Status
      if: always()
      run: |
        echo "📢 CI/CD completed with status: ${{ job.status }}"
        echo "View details at: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
